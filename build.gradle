/*
 * Copyright 2019 Akashic Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'idea'


import java.security.MessageDigest

repositories {
    mavenCentral()
}


ext {
    importPackage =
            "io.yggdrash.common.contract" +
                    ",io.yggdrash.common.contract.method" +
                    ",io.yggdrash.common.contract.standard" +
                    ",io.yggdrash.common.rlp" +
                    ",com.google.common.base" +
                    ",com.google.common.primitives" +
                    ",io.yggdrash.common.contract.vo" +
                    ",io.yggdrash.common.contract.vo.dpoa" +
                    ",io.yggdrash.common.contract.vo.dpoa.tx" +
                    ",io.yggdrash.common.crypto" +
                    ",io.yggdrash.common.crypto.jce" +
                    ",io.yggdrash.common.exception" +
                    ",io.yggdrash.common.store" +
                    ",io.yggdrash.common.store.datasource" +
                    ",io.yggdrash.common.utils" +
                    ",org.osgi.framework" +
                    ",org.osgi.util.tracker" +
                    ",com.google.gson" +
                    ",org.w3c.dom" +
                    ",org.slf4j" +
                    ",java.math" +
                    ",io.yggdrash.contract.core" +
                    ",io.yggdrash.contract.core.annotation" +
                    ",io.yggdrash.contract.core.store" +
                    ",io.yggdrash.contract.core.channel"


    excludeList = ["META-INF/LICENSE", "META-INF/NOTICE", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/NOTICE"]
}

// project directory setup
def rootPath = file('.').absolutePath
def buildContract = rootPath + '/build/contract'
def projectContractPath = rootPath + '/../../resources/contract'

task contractsPackage(type: Jar) {
    //Add current module source
    from(sourceSets.main.output) {
        include "**"
        exclude(["system-contracts"])
    }


    manifest {
        attributes(
                'Bundle-ManifestVersion': '2',
                'Bundle-Name': 'YEED',
                'Bundle-Description': 'Yggdrash YEED Contract',
                'Bundle-Vendor': 'YGGDRASH',
                'Bundle-SymbolicName': 'io.yggdrash.contract.yeed.YeedContract',
                'Bundle-Version': '0.8.0',
                'Bundle-Activator': 'io.yggdrash.contract.yeed.YeedContract',
                'Import-Package': "${importPackage}"
        )
    }
    preserveFileTimestamps = false
    exclude(excludeList)
    project.archivesBaseName = manifest.attributes.get('Bundle-Name')
    project.version = manifest.attributes.get('Bundle-Version')
}


def generateSha1(File file) {
    MessageDigest md = MessageDigest.getInstance("SHA-1");
    file.eachByte 4096, {bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().collect {String.format "%02x", it}.join();
}

task deleteOutputContract(type: Delete) {
    delete buildContract
}

task copyContractToResource(type: Copy) {
    dependsOn deleteOutputContract
    dependsOn contractsPackage

    file("${buildContract}").mkdirs()

    // Copy Contract File
    from file('build/libs')
    into file("${buildContract}")
    exclude "${project.name}*"

    doLast {
        def libFiles = file("${buildContract}").listFiles()
        libFiles.each {
            def sha1Name = generateSha1(it)+'.jar'
            def sha1File = file("${buildContract}/"+sha1Name)
            if (it.getName().endsWith('.jar') && it.getName() != sha1Name) {
                println it.getName() + ' -> ' + sha1Name
                it.renameTo(sha1File)
            }
        }
    }
}
task copyContractToProject(type: Copy) {
    dependsOn copyContractToResource

    from file("${buildContract}")
    into file("${projectContractPath}")
}


jar {
    preserveFileTimestamps = false
    dependsOn copyContractToProject
}

dependencies {
    compile "io.yggdrash:yggdrash-common:0.10.1-beta"
}